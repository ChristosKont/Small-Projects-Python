# -*- coding: utf-8 -*- 
from random import randint

def wordSelection(wordlist, previous):
    """
    Επιστρέφει μία τυχαία λέξη από το λεξικό
    που δημιουργήσαμε, εξετάζοντας αν αυτή η λέξη
    έχει ήδη χρησιμοποιηθεί

    wordlist --- το λεξικό που δημιουργήσαμε
    previous --- λεξικό που περιέχει λέξεις που έχουν ήδη χρησιμοποιηθει
    word --- η λέξη που επιλέχθηκε
    
    """
    exists = True
    while exists == True:
        p = randint(0, len(wordlist)-1)
        word = wordlist[p]
        exists = word in previous
    previous.append(word)
    
    return word

def screen(word):
    """
    Διαβάζει το γράμμα που δίνει ο εκάστοτε παίκτης
    εξασφαλίζοντας ότι δίνει ένα μόνο γράμμα

    word --- η λέξη που πρέπει να μαντέψει ο παίκτης
    letter --- το γράμμα που δίνει ο παίκτης

    """
    #Μετατροπή λίστας που περιέχει τα ζητούμενα γράμματα σε string
    temp = ''.join(word)
    
    print('\nΗ λέξη που πρέπει να μαντέψεις είναι:', temp)
    letter = input(str('Δώσε γράμμα: '))
    while len(letter) > 1:
        letter = input(str('\nΛάθος! Δώσε μόνο ένα γράμμα: '))

    return letter

def getPlayers():
    """
    Διαβάζει τον αριθμό παικτών και επιστρέφει
    μια λίστα με τα ονόματα του εκάστοτε παίκτη

    players --- η λίστα με τα ονόματα των παικτών

    """
    p = int(input('Δώσε αριθμό παικτών: '))
    players = []
    for x in range(1, p+1):
        players.append(input('Δώσε όνομα %iου παίκτη: '%x))
        
    return players

def getScore(p):
    """
    Δημιουργεί dictionary για την αποθήκευση του σκορ
    αρχικοποιώντας το σκορ για όλους τους παίκτες σε 1

    p --- λίστα με τα ονόματα των παικτών
    score --- dictionary με το σκορ

    >>> getScore(['John', 'George', 'Nick'])
    {'John': 1, 'George': 1, 'Nick': 1}

    >>> getScore(['Michael'])
    {'Michael': 1}

    """
    score = {}
    for x in range(len(p)):
        score.update({p[x]: 1})

    return score

def getLives(p):
    """
    Δημιουργει dictionary για την αποθήκευση των
    ζωών των παικτών μέσω της βοηθητικής συνάρτησης
    getLevel
    
    p --- λίστα με τα ονόματα των παικτών
    getLevel --- συνάρτηση επιλογής επιπέδου δυσκολίας
    l --- ditionary με τις ζωές των παικτών

    """
    l = {}
    for x in p:
        print()
        l.update({x: getLevel(x)})

    return l

def getLevel(x):
    """
    Συνάρτηση επιλογής επιπέδου δυσκολίας
    
    x --- το όνομα του εκάστοτε παίκτη
    l --- το επίπεδο δυσκολίας

    """
    l = 0
    while l!=8 and l!=6 and l!=4:
        print('"%s": Επίλεξε επίπεδο δυσκολίας' %x)
        l = int(input('Αρχάριος(8), Μέτριος(6), Έμπειρος(4): '))
        
    return l

def updateScore(s):
    """
    Συνάρτηση που ανανεώνει το σκορ στο τέλος
    κάθε γύρου αφαιρώντας τους χαμένους παίκτες

    s --- dictionary που περιέχει το σκορ του παιχνιδιού

    >>> updateScore({'John': 1, 'Michael': 0, 'George': 1, 'Nick': 0})
    {'John': 1, 'George': 1}

    >>> updateScore({'John': 1, 'George': 1})
    {'John': 1, 'George': 1}

    """
    #Δημιουργία λίστας με τα ονόματα('keys') των παιχτών που έχουν χάσει
    l = []
    for x in s.keys():
        if s[x] == 0:
            l.append(x)

    #Αφαίρεση των παιχτών που έχουν χάσει('value'=0)
    for x in l:
        if s[x] == 0:
            del s[x]

    return s

def getDictionary():
    """
    Συνάρτηση που δημιουργεί το λεξικό που περιέχει
    τις τυχαία επιλεγμένες λέξεις για το παιχνίδι

    dictionary -- το λεξικό
    
    """
    dictionary = ['αμπέχονο', 'αμοιβή', 'ανακαίνιση', 'αντίρρηση', 'αρραβώνας',
                  'βερίκοκο',  'βλέμμα', 'γραμματέας', 'διαρρήκτης', 'δίκιο',
                  'διευκρίνιση', 'δολάριο', 'εισιτήριο', 'ελάττωμα', 'επεισόδιο',
                  'ζήλια', 'καπέλο', 'κεραμίδι', 'κόκορας', 'κρεμάλα',
                  'κύπελλο', 'κύτταρο', 'ισορροπία', 'μέλισσα', 'μπάλα',
                  'ξινός', 'ορκωμοσία', 'παλιννόστηση', 'παλίρροια', 'περιβάλλον',
                  'περιττός', 'πέψη', 'πιρούνι', 'πλειστηριασμός', 'πρωτόκολλο',
                  'σιντριβάνι', 'σπάγκος', 'στιλέτο', 'συμμορία', 'συνδυασμός',
                  'συνείδηση', 'σύρραξη', 'συρρίκνωση', 'ταξίδι', 'τουαλέτα',
                  'τρελός', 'υγεία', 'φάκελος', 'φερέγγυος', 'ψίθυρος']
    
    return dictionary

def nextRound(r, name, lives):
    """
    Συνάρτηση που εκτυπώνει ένα εισαγωγικο πλαισιο
    στην αρχή κάθε νέου γύρου

    r --- ο αριθμός του γύρου
    name --- το όνομα του εκάστοτε παίκτη
    lives --- dictionary που περιέχει το πλήθος ζωών του εκάστοτε παικτη

    """
    l = lives[name]
    print('\n========================%iΟΣ ΓΥΡΟΣ=============================' %r )
    print('\n"%s": Έχεις περιθώριο %i λάθος γράμματα, στα %i λάθη χάνεις.' %(name, l-1, l))


#DOCTEST MOD: python utils.py -v    
if __name__ == "__main__":
    import doctest
    doctest.testmod()
